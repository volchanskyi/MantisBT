/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'Ivan' at '2/27/18 10:24 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

plugins {
	//Add a download task to Gradle that displays progress information
    id 'de.undercouch.download' version '3.4.3'
    //Provide insights into problems with the build environment, dependencies, performance
    id 'com.gradle.build-scan' version '2.2.1'
    // Apply the java plugin to add support for Java
    id 'java'
    
    
}


buildScan {
	def vcsBranch = "https://github.com/volchanskyi/TwoLevelFramework" 
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    if (System.getenv('CI')) {
        tag 'CI'
    } else {
        tag 'Local'
    }
    publishAlways()
    tag System.getProperty('os.name')
    link 'Source', vcsBranch
}


//Define properties here
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

//adding Allure
configurations {
    agent
}


// In this section you declare the external dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.25'
    
	// This dependency is used internally, and not exposed to consumers on their own compile classpath.
    //Guava is a suite of core and expanded libraries that include utility classes, google's collections, io classes, and much much more.
    implementation 'com.google.guava:guava:25.0-jre'
    
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    //https://search.maven.org/artifact/org.testng/testng
    implementation 'org.testng:testng:6.14.3'
    //https://search.maven.org/artifact/org.seleniumhq.selenium/selenium-java
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    //compile 'com.beust:jcommander:1.72'
    implementation 'org.subethamail:subethasmtp:3.1.7'
    implementation 'ru.lanwen.verbalregex:java-verbal-expressions:1.5'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    //https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.8.5'
    //https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    implementation 'org.apache.httpcomponents:httpclient:4.5.7'
    //https://mvnrepository.com/artifact/org.apache.httpcomponents/fluent-hc
    implementation 'org.apache.httpcomponents:fluent-hc:4.5.7'
    //https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    //The AspectJ weaver introduces advices to java classes
 	agent 'org.aspectj:aspectjweaver:1.9.2'
	// 	implementation "org.aspectj:aspectjweaver:1.9.2"
	//adding Allure
    implementation 'ru.yandex.qatools.allure:allure-testng-adaptor:1.5.4'
	//Adding HamCrest assertions
	// https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
	
}


/**
 * Sequentially download a list of files to a directory
 */
 //Download updated drivers (for no CI environments)
task downloadDrivers(type: Download) {
	group = 'Update webdriver'
	description = 'Task that downloads the webdriver'
	if (project.getProperty('platform').toUpperCase().contains("WINDOWS")) {
	def webdriversFolderPath = "src/test/resources/webdriver/webdriver.exe"
	if (project.getProperty('browser').toUpperCase().contains("CHROME")) {
        src 'https://github.com/volchanskyi/extras-two-level-framework-drivers/raw/master/chromedriver.exe'
        } else if (project.getProperty('browser').toUpperCase().contains("FIREFOX")) {
        src 'https://github.com/volchanskyi/extras-two-level-framework-drivers/raw/master/geckodriver.exe'
        } else if (project.getProperty('browser').toUpperCase().contains("MICROSOFTEDGE")) {
        src 'https://github.com/volchanskyi/extras-two-level-framework-drivers/raw/master/MicrosoftWebDriver.exe'
        } else if (project.getProperty('browser').toUpperCase().contains("INTERNET EXPLORER")) {
        src 'https://github.com/volchanskyi/extras-two-level-framework-drivers/raw/master/IEDriverServer.exe'
    		}
    		dest webdriversFolderPath
    		onlyIfModified true
    		overwrite true
	} else if (project.getProperty('platform').toUpperCase().contains("MAC")) {
	def webdriversFolderPath = "src/test/resources/webdriver/webdriver"
	if (project.getProperty('browser').toUpperCase().contains("CHROME")) {
        src 'https://github.com/volchanskyi/extras-two-level-framework-drivers/raw/master/chromedriver'
        } else if (project.getProperty('browser').toUpperCase().contains("FIREFOX")) {
        src 'https://github.com/volchanskyi/extras-two-level-framework-drivers/raw/master/geckodriver'
        }
    		dest webdriversFolderPath
    		onlyIfModified true
    		overwrite true
	}
	
}

// Download updated property files and test data
task downloadResources(type: Download) {
	group = 'Update resource files'
	description = 'Task that downloads and updates resource files'
	def resourceFolderPath = "src/test/resources"
    src([
        'https://github.com/volchanskyi/extras-two-level-framework-locators/raw/master/locator.properties',
    	'https://github.com/volchanskyi/extras-two-level-framework-valid-test-data/raw/master/validAccounts.csv',
    	'https://github.com/volchanskyi/extras-two-level-framework-valid-test-data/raw/master/validProducts.csv'
    	])
    dest resourceFolderPath
    onlyIfModified true
    overwrite true
}

//Clean up the project
task cleanUp(type: Delete) {
	def webdriversFolderPath = "src/test/resources/webdriver"
    delete webdriversFolderPath
}


/*
//copy drivers to the webdrivers folder to compile
task copyDrivers (type: Copy){
	from('build') {
        include '*.exe'
    }
    into 'src/test/resources/webdrivers/pc'
}
*/

//main Test task
test {

	doFirst {
    jvmArgs "-javaagent:${configurations.agent.singleFile}"
	}
	
	//Run all tests
	ignoreFailures = true

	useTestNG {
		suites 'src/test/resources/testng.xml'
		//"DEFAULTGROUP" tests will be used if there is no value passed
		includeGroups(project.findProperty('testGroups') ?: 'DEFAULTGROUP')
	}
	
	if (project.hasProperty('browser')) {
	systemProperty 'browser', "${browser}"
	}
	if (project.hasProperty('target')) {
	systemProperty 'target', "${target}"
	}
	if (project.hasProperty('debug')) {
	systemProperty 'debug', findProperty("debug")
	}
	if (project.hasProperty('platform')) {
	systemProperty 'platform', "${platform}"
	}

}

defaultTasks 'test'
//download the webdrivers from the github repo after the project`s clean up
clean.finalizedBy downloadDrivers
//download resources to compile
clean.finalizedBy downloadResources
//Skip downloading webdrivers if using CI
downloadDrivers.onlyIf {project.getProperty('target') == "local"}
//CleanUp webdrivers after the test
test.finalizedBy cleanUp
